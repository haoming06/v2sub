#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import sys
import os
import requests
import base64
import json
import subprocess
import re

# 鉴权
if os.geteuid() != 0:
    print("您需要切换到 Root 身份才可以使用本脚本。尝试在命令前加上 sudo?\n")
    exit()

# 本脚本的配置文件，目前的作用是仅存储用户输入的订阅地址，这样用户再次启动脚本时，就无需再输入订阅地址。
# 预设的存储的路径为存储到用户的 HOME 内。
subFilePath = os.path.expandvars('$HOME') + '/.v2sub.conf'
# 获取订阅地址
if not os.path.exists(subFilePath):
    open(subFilePath, 'w+')

subFile = open(subFilePath, 'r')
subLink = subFile.read().strip()
subFile.close()

if not subLink:
    print('您还没有输入订阅地址，请输入订阅地址。')
    subLink = input('订阅地址：')
    subFile = open(subFilePath, 'w+')
    subFile.write(subLink)
    subFile.close()
else:
    print('订阅地址：'+subLink)
print('如果您的订阅地址有误，请删除或编辑 '+subFilePath)

print("\n开始从订阅地址中读取服务器节点… 如等待时间过久，请检查网络。\n")

# 获取订阅信息
content = requests.get(subLink).content
missing_padding = 4 - len(content) % 4
if missing_padding:
  content += b'=' * missing_padding
serverListLink = base64.urlsafe_b64decode(content).splitlines()
for i in range(len(serverListLink)):
    serverNode = json.loads(base64.b64decode(bytes.decode(serverListLink[i]).replace('vmess://','')))
    print('【' + str(i) + '】' + serverNode['ps'])
    serverListLink[i] = serverNode

while True:
    setServerNodeId = int(input("\n请输入要切换的节点编号："))
    subprocess.call('ping ' + serverListLink[setServerNodeId]['add'] + ' -c 3 -w 10', shell = True)
    if re.search('[yesYES]', input('确定要使用该节点吗？[y/N] ')):
        break

# 编辑 v2ray 配置文件
v2rayConf = {
  "log": {
    "error": "",
    "loglevel": "info",
    "access": ""
  },
  "inbounds": [
    {
      "listen": "127.0.0.1",
      "protocol": "socks",
      "settings": {
        "ip": "",
        "userLevel": 0,
        "timeout": 360,
        "udp": False,
        "auth": "noauth"
      },
      "port": "1080"
    },
    {
      "listen": "127.0.0.1",
      "protocol": "http",
      "settings": {
        "timeout": 360
      },
      "port": "1187"
    }
  ],
  "outbounds": [
    {
      "mux": {
        "enabled": False,
        "concurrency": 8
      },
      "protocol": "vmess",
      "streamSettings": {
        "wsSettings": {
          "path": "",
          "headers": {
            "host": serverListLink[setServerNodeId]['host']
          }
        },
        "tlsSettings": {
          "allowInsecure": True
        },
        "security": "none",
        "network": "ws"
      },
      "tag": "agentout",
      "settings": {
        "vnext": [
          {
            "address": serverListLink[setServerNodeId]['add'],
            "users": [
              {
                "id": serverListLink[setServerNodeId]['id'],
                "alterId": int(serverListLink[setServerNodeId]['aid']),
                "level": 0,
                "security": "aes-128-gcm"
              }
            ],
            "port": int(serverListLink[setServerNodeId]['port'])
          }
        ]
      }
    },
    {
      "tag": "direct",
      "protocol": "freedom",
      "settings": {
        "domainStrategy": "AsIs",
        "redirect": "",
        "userLevel": 0
      }
    },
    {
      "tag": "blockout",
      "protocol": "blackhole",
      "settings": {
        "response": {
          "type": "none"
        }
      }
    }
  ],
  "dns": {
    "servers": [
      ""
    ]
  },
  "routing": {
    "strategy": "rules",
    "settings": {
      "domainStrategy": "IPIfNonMatch",
      "rules": [
        {
          "outboundTag": "direct",
          "type": "field",
          "ip": [
            "geoip:cn",
            "geoip:private"
          ],
          "domain": [
            "geosite:cn",
            "geosite:speedtest"
          ]
        }
      ]
    }
  },
  "transport": {}
}

json.dump(v2rayConf, open('/etc/v2ray/config.json', 'w'), indent=2)

print("\n重启 v2ray 服务……\n")
subprocess.call('systemctl restart v2ray.service', shell = True)

print('地址切换完成')

exit()

